pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir 'jenkins/image/'            
            additionalBuildArgs  '--build-arg version=1.0.2'
            args '-v /home/jenkins/.kube:/home/jenkins/.kube/ -u root:root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xterm')
    }

    environment {
        APP_PATH = "calc_app/"
        MANIFEST_PATH = "k8s-manifest/"
        KUBECONFIG = '/home/jenkins/.kube/config'
        DOCKER_REGISTRY = "ghcr.io/lodisav-devops"
        DOCKER_CRED = 'github_PAT'
        GITHUB_REGISTRY_SECRET = "github-cred"
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    println("BRANCH - ${env.BRANCH_NAME}")
                    println("PRID - ${env.CHANGE_ID}")
                    if (BRANCH_NAME == 'master') {
                        TAG = 'latest'
                    } else {
                        TAG = env.CHANGE_ID
                    }
                    IMAGE_NAME = "calculator:${TAG}"
                    FINAL_IMAGE_NAME = "${DOCKER_REGISTRY}/${IMAGE_NAME}"
                    GITHUB_REGISTRY = "ghcr.io"
                    GITHUB_NAME_REPO = "lodisav-devops"
                }
            }
        }
        
        stage('Build') {
            steps {
                dir(APP_PATH) {
                    sh """
                    docker build -t ${IMAGE_NAME} -f Dockerfile .
                    """
                }

                // emailext body: 'Test Message',
                // // recipientProviders: [developers(), requestor()],
                // subject: 'Test Subject',
                // to: 'tema_mcla13@mail.ru'
            }
            // post{
            //     always{
            //         emailext body: 'Test Message',
            //         // recipientProviders: [developers(), requestor()],
            //         subject: 'Test Subject',
            //         to: 'lodisav.devops@gmail.com'
            //     }
            // }    


            post{
                always{
                    mail to: "tema_mcla13@mail.ru",
                    subject: "Test Email",
                    body: "Test"
                }
            }            
        }

        stage('Test') {
            steps {
                dir(APP_PATH) {
                    sh """
                    docker run ${IMAGE_NAME} pytest
                    """
                }
            }
        }

        stage('Create image') {
            steps {   
                script {
                    def apply = false
                    input message: 'Confirm that the tests completed successfully?', ok: 'Apply'
                    apply = true
                    if (apply) {
                        dir(APP_PATH) {
                            sh"""
                            docker build -t ${FINAL_IMAGE_NAME} -f Dockerfile .
                            docker images                    
                            """
                        }
                    }
                }                                
            }
        }

        stage('Push image') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CRED, passwordVariable: 'pass', usernameVariable: 'user')]) {
                    sh """
                    echo ${pass} | docker login ghcr.io -u ${user} --password-stdin
                    docker push ${FINAL_IMAGE_NAME}
                    """
                }
            }
        }    

        stage('Kubectl check') {
            when { expression { BRANCH_NAME == 'master'}}
            steps {
                dir(APP_PATH) {
                    sh """
                    export KUBECONFIG=${KUBECONFIG}
                    kubectl get all
                    """
                }
            }
        }

        stage('Deploy') {
            when { expression { BRANCH_NAME == 'master'}}
            steps {
                dir(MANIFEST_PATH) {
                    sh """
                    export KUBECONFIG=${KUBECONFIG}
                    sed -i "s/GITHUB_REGISTRY_SECRET/${GITHUB_REGISTRY_SECRET}/g" deployment.yaml
                    sed -i "s/GITHUB_REGISTRY/${GITHUB_REGISTRY}/g" deployment.yaml
                    sed -i "s/GITHUB_NAME_REPO/${GITHUB_NAME_REPO}/g" deployment.yaml
                    sed -i "s/IMAGE_NAME/${IMAGE_NAME}/g" deployment.yaml
                    cat deployment.yaml
                    kubectl delete -f deployment.yaml
                    sleep 10
                    kubectl apply -f deployment.yaml
                    sleep 15
                    kubectl get all
                    """
                }
            }
        }
    }
}
